Index: CHANGES.txt
===================================================================
--- CHANGES.txt	(révision 67318)
+++ CHANGES.txt	(copie de travail)
@@ -1,5 +1,6 @@
 SVN/Unreleased
 ==============
+  - Add support for projects which do not use repositories.
 
   - Added a mechanism to have username/password for Subversion authentication
     Which consists of a buildbot patch and a link to .httpauth on buildout side
Index: setup.py
===================================================================
--- setup.py	(révision 67318)
+++ setup.py	(copie de travail)
@@ -8,7 +8,7 @@
 def read(*rnames):
     return open(os.path.join(os.getcwd(), *rnames)).read()
 
-version = '0.4.0'
+version = '0.4.1'
 
 long_description = (
     read('README.txt')
Index: collective/buildbot/project_recipe.py
===================================================================
--- collective/buildbot/project_recipe.py	(révision 67318)
+++ collective/buildbot/project_recipe.py	(copie de travail)
@@ -129,33 +129,40 @@
         files = []
         project_names = set()
 
-        for repository in repositories:
-            if len(repositories) > 1:
-                # Distribute builds randomly so we don't build
-                # everything at once
-                minute = str(random.randint(1,59))
-                
-                # Make sure we use unique names for project config
-                # files
-                name = self.extract_name(repository)
-                idx = 2
-                while name in project_names:
-                    name = '%s_%s' % (self.extract_name(repository), idx)
-                    idx += 1
-                project_names.add(name)
-                if 'dependent-scheduler'in options:
-                    # TODO
-                    log.info('dependent-scheduler is selected with projects'
-                             ' including more than one repository.')
-            else:
-                name = self.name
+        if cron is not None:
+            options['cron-scheduler'] = ' '.join([minute, hour, dom, month, dow])
 
-            options['repository'] = repository
-            if cron is not None:
-                options['cron-scheduler'] = ' '.join([minute, hour, dom, month, dow])
-            p = Project(self.buildout, name, options)
+        # we can add project with a build proces that needs more than a simple
+        # checkout, and we will handle it by hand.
+        if not repositories:
+            p = Project(self.buildout, self.name, options)
             files.extend(p.install())
+        else:
+            for repository in repositories:
+                if len(repositories) > 1:
+                    # Distribute builds randomly so we don't build
+                    # everything at once
+                    minute = str(random.randint(1,59))
 
+                    # Make sure we use unique names for project config
+                    # files
+                    name = self.extract_name(repository)
+                    idx = 2
+                    while name in project_names:
+                        name = '%s_%s' % (self.extract_name(repository), idx)
+                        idx += 1
+                    project_names.add(name)
+                    if 'dependent-scheduler'in options:
+                        # TODO
+                        log.info('dependent-scheduler is selected with projects'
+                                 ' including more than one repository.')
+                else:
+                    name = self.name
+
+                options['repository'] = repository
+                p = Project(self.buildout, name, options)
+                files.extend(p.install())
+
         return files
 
     update = install
Index: collective/buildbot/docs/project.txt
===================================================================
--- collective/buildbot/docs/project.txt	(révision 67318)
+++ collective/buildbot/docs/project.txt	(copie de travail)
@@ -133,7 +133,7 @@
   You can also have your slave buildout install pyflakes and use that
   instead of a globally installed version.
 
-  .. _PyFlakes: http://divmod.org/trac/wiki/DivmodPyflakes   
+  .. _PyFlakes: http://divmod.org/trac/wiki/DivmodPyflakes
 
 Example usage
 =============
@@ -147,7 +147,7 @@
     ... """
     ... [buildout]
     ... parts = my.package
-    ... 
+    ...
     ... [my.package]
     ... recipe = collective.buildbot:project
     ... slave-names = slave1
@@ -186,7 +186,7 @@
     ... [buildout]
     ... parts = my_project
     ... svn = http://svn.example.com/svnroot
-    ... 
+    ...
     ... [my_project]
     ... recipe = collective.buildbot:project
     ... slave-names = slave1
@@ -210,6 +210,45 @@
     Generated config '/sample-buildout/parts/projects/third.package_2.cfg'.
 
 
+You may also have projects whith particular build sequence. A simple check-out
+will not be sufficient. You can in this case omit the repository and
+use the build sequence to specify all the build process.
+
+    >>> write('buildout.cfg',
+    ... """
+    ... [buildout]
+    ... parts = my_project
+    ... svn = http://svn.example.com/svnroot
+    ...
+    ... [my_project]
+    ... recipe = collective.buildbot:project
+    ... slave-names = slave1
+    ... vcs = svn
+    ... build-sequence =
+    ...    svn co ${buildout:svn}/my.package/trunk
+    ...    make
+    ... """)
+
+When we run the buildout we can see that it generated a separate
+configuration file for each project representing a single repository::
+
+    >>> print system(buildout)
+    Uninstalling my_project.
+    Installing my_project.
+    Generated config '/sample-buildout/parts/projects/my_project.cfg'.
+    <BLANKLINE>
+
+    >>> cat(join('parts', 'projects', 'my_project.cfg'))
+    [project]
+    build-sequence =
+        svn co http://svn.example.com/svnroot/my.package/trunk
+        make
+    name = my_project
+    repository =
+    ...
+    <BLANKLINE>
+
+
 The projects recipe
 *******************
 
@@ -217,4 +256,4 @@
 supported anymore. Simply supply multiple repositories for the
 ``collective.buildbot:project`` recipe to achieve the same result.
 
-  
+.. vim: set ft=doctest :
Index: collective/buildbot/project.py
===================================================================
--- collective/buildbot/project.py	(révision 67318)
+++ collective/buildbot/project.py	(copie de travail)
@@ -54,7 +54,7 @@
         self.mail_host = options.get('mail_host', 'localhost')
         self.email_notification_sender = options.get('email_notification_sender','').strip()
         self.email_notification_recipients = options.get('email_notification_recipients', '').split()
-        
+
         self.slave_names =  options.get('slave_names', '').split()
         self.vcs = options.get('vcs', 'svn')
 
@@ -69,7 +69,7 @@
         self.options = options
         self.schedulers = []
         self.username, self.password = self._get_login(self.repository)
- 
+
     def _get_login(self, repository):
         """gets an option in .httpauth"""
         httpauth = join(os.path.expanduser('~'), '.buildout', '.httpauth')
@@ -80,8 +80,8 @@
             if repository.startswith(url):
                 return username, password
         return None, None
-        
 
+
     def executable(self):
         """returns python bin"""
         return os.sep.join(['..', '..', 'bin', 'python'])
@@ -189,24 +189,27 @@
 
     def setBuilder(self, c):
         executable = self.executable()
+        update_sequence = []
 
-        if self.vcs == 'svn':
-            if self.username is not None and self.password is not None:
-                update_sequence = [s(steps.source.SVN, mode="update", svnurl=self.repository,
-                                     username=self.username, password=self.password)]
+        # update the code only if we setted up a repository
+        if self.repository.strip():
+            if self.vcs == 'svn':
+                if self.username is not None and self.password is not None:
+                    update_sequence = [s(steps.source.SVN, mode="update", svnurl=self.repository,
+                                         username=self.username, password=self.password)]
+                else:
+                    update_sequence = [s(steps.source.SVN, mode="update", svnurl=self.repository)]
+            elif self.vcs in  ('hg', 'bzr'):
+                if self.vcs == 'hg':
+                    klass = steps.source.Mercurial
+                else:
+                    klass = steps.source.Bzr
+                update_sequence = [s(klass, mode="update", repourl=self.repository)]
+            elif self.vcs == 'git':
+                update_sequence = [s(steps.source.Git, mode='update',
+                                     repourl=self.repository, branch=self.branch)]
             else:
-                update_sequence = [s(steps.source.SVN, mode="update", svnurl=self.repository)]
-        elif self.vcs in  ('hg', 'bzr'):
-            if self.vcs == 'hg':
-                klass = steps.source.Mercurial
-            else:
-                klass = steps.source.Bzr
-            update_sequence = [s(klass, mode="update", repourl=self.repository)]
-        elif self.vcs == 'git':
-            update_sequence = [s(steps.source.Git, mode='update',
-                                 repourl=self.repository, branch=self.branch)]
-        else:
-            raise NotImplementedError('%s not supported yet' % self.vcs)
+                raise NotImplementedError('%s not supported yet' % self.vcs)
 
         def _cmd(cmd):
             cmd = [el.strip() for el in cmd.split()]
Index: CONTRIBUTORS.txt
===================================================================
--- CONTRIBUTORS.txt	(révision 67318)
+++ CONTRIBUTORS.txt	(copie de travail)
@@ -13,3 +13,4 @@
  - Jean-Francois Roche
  - Mustapha Benali [mustapha]
  - Sylvain Viollon [thefunny]
+ - Mathieu Pasquet (kiorky)

